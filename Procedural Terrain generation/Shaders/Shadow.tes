#version 450 core
layout(quads, fractional_odd_spacing, ccw) in;

uniform sampler2D noiseMap;

out TES_OUT
{
    vec4 fragPosLightSpace;
	vec4 fragPos;	
    vec2 texCoord;
    float height;
}tes_out;

in TCS_OUT
{
    mat4 mvp;
    mat4 model;
    mat4 lightMatrix;
    vec2 texCoord;
}tcs_in[];

uniform float height;

void main()
{
    float u = gl_TessCoord.x;
    float v = gl_TessCoord.y;

    vec2 t00 = tcs_in[0].texCoord;
    vec2 t01 = tcs_in[1].texCoord;
    vec2 t10 = tcs_in[2].texCoord;
    vec2 t11 = tcs_in[3].texCoord;

    vec2 t0 = (t01 - t00) * u + t00;
    vec2 t1 = (t11 - t10) * u + t10;
    vec2 tex = (t1 - t0) * v + t0;
    
    tes_out.texCoord = tex;
    tes_out.height = texture(noiseMap, tex).r * height - 16.0f;

    vec4 p00 = gl_in[0].gl_Position;
    vec4 p01 = gl_in[1].gl_Position;
    vec4 p10 = gl_in[2].gl_Position;
    vec4 p11 = gl_in[3].gl_Position;

    vec4 uVec = p01 - p00;
    vec4 vVec = p10 - p00;
    vec4 normal = normalize( vec4(cross(vVec.xyz, uVec.xyz), 0) );

    vec4 p0 = (p01 - p00) * u + p00;
    vec4 p1 = (p11 - p10) * u + p10;
    vec4 p = (p1 - p0) * v + p0 + normal * tes_out.height;

    gl_Position = tcs_in[0].mvp * p;
    tes_out.fragPos = tcs_in[0].model * p;
    tes_out.fragPosLightSpace = tcs_in[0].lightMatrix * tes_out.fragPos;
}