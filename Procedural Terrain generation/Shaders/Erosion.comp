#version 450 core

layout (local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;

layout(std140, binding = 0) uniform Erosion
{
    int  mapSize;
	int brushLength;
	int  borderSize;
	int  maxLifetime;
	float inertia;
	float sedimentCapacityFactor;
	float minSedimentCapacity;
	float depositSpeed;
	float erodeSpeed;
	float evaportateSpeed;
	float gravity;
	float startSpeed;
	float startWater;
}

layout(std430, binding = 0) buffer mapData
{
    float brush_indices[7];
    float brush_weights[7];
    float map[65536];
    int random_indices[];
};

vec3 CalculateHeightAndGradient(float posX, float posY)
{
	int CoordX = int(posX);
	int CoordY = int(posY);

	float x = posX - coordX;
    float y = posY - coordY;

    // Calculate heights of the four nodes of the droplet's cell
    int nodeIndexNW = coordY * mapSize + coordX;
    float heightNW = map[nodeIndexNW];
    float heightNE = map[nodeIndexNW + 1];
    float heightSW = map[nodeIndexNW + mapSize];
    float heightSE = map[nodeIndexNW + mapSize + 1];

    // Calculate droplet's direction of flow with bilinear interpolation of height difference along the edges
    float gradientX = (heightNE - heightNW) * (1 - y) + (heightSE - heightSW) * y;
    float gradientY = (heightSW - heightNW) * (1 - x) + (heightSE - heightNE) * x;

    // Calculate height with bilinear interpolation of the heights of the nodes of the cell
    float height = heightNW * (1 - x) * (1 - y) + heightNE * x * (1 - y) + heightSW * (1 - x) * y + heightSE * x * y;

    return float3(gradientX,gradientY,height);
}

void main()
{
    uint index = randomIndices[gl_GlobalInvocationID.x];
    float posX = float(index % 256);
    float posY =  float(index / 256.0f);
    float dirX = 0;
    float dirY = 0;
    float sediment = 0;

    for (int lifetime = 0; lifetime < Get(maxLifetime); lifetime ++) 
    {
        uint nodeX = uint(posX);
        uint nodeY = uint(posY);

        //Grab droplet position in the height map
        uint dropletIndex = nodeY * mapSize + nodeX;

        //Compute cell values
        float cellOffsetX = posX - nodeX;
        float cellOffsetY = posY - nodeY;

        // Calculate droplet's height and direction of flow with bilinear interpolation of surrounding heights
        float3 heightAndGradient = CalculateHeightAndGradient (posX, posY);

        // Update the droplet's direction and position (move position 1 unit regardless of speed)

        dirX = (dirX * inertia - heightAndGradient.x * (1 - inertia));
        dirY = (dirY * inertia - heightAndGradient.y * (1 - inertia));
        // Normalize direction
        float len = max(0.01,sqrt(dirX * dirX + dirY * dirY));
        dirX /= len;
        dirY /= len;
        posX += dirX;
        posY += dirY;

        // Stop simulating droplet if it's not moving or has flowed over edge of map
        if ((dirX == 0 && dirY == 0) || posX < borderSize || posX > mapSize - borderSize || posY < borderSize || posY > mapSize - borderSize) {
            break;
        }

        // Find the droplet's new height and calculate the deltaHeight
        float newHeight = CalculateHeightAndGradient(posX, posY).z;
        float deltaHeight = newHeight - heightAndGradient.z;

        // Calculate the droplet's sediment capacity (higher when moving fast down a slope and contains lots of water)
        float sedimentCapacity = max(-deltaHeight * speed * water * sedimentCapacityFactor, minSedimentCapacity);

        // If carrying more sediment than capacity, or if flowing uphill:
        if (sediment > sedimentCapacity || deltaHeight > 0) {
            // If moving uphill (deltaHeight > 0) try fill up to the current height, otherwise deposit a fraction of the excess sediment
            float amountToDeposit = (deltaHeight > 0) ? min(deltaHeight, sediment) : (sediment - sedimentCapacity) * depositSpeed;
            sediment -= amountToDeposit;
            
            map[dropletIndex] += amountToDeposit * (1 - cellOffsetX) * (1 - cellOffsetY);
            map[dropletIndex + 1] += amountToDeposit * cellOffsetX * (1 - cellOffsetY);
            map[dropletIndex + mapSize] += amountToDeposit * (1 - cellOffsetX) * cellOffsetY;
            map[dropletIndex + mapSize) + 1] += amountToDeposit * cellOffsetX * cellOffsetY;
        }
        else {
            // Erode a fraction of the droplet's current carry capacity.
            // Clamp the erosion to the change in height so that it doesn't dig a hole in the terrain behind the droplet
            float amountToErode = min ((sedimentCapacity - sediment) * erodeSpeed, -deltaHeight);
            
            for (int i = 0; i < brushLength; i ++) 
            {
                uint erodeIndex = dropletIndex + brushIndices[i];

                float weightedErodeAmount = amountToErode * brushWeights[i];
                float deltaSediment = (map[erodeIndex] < weightedErodeAmount) ? map[erodeIndex] : weightedErodeAmount;

                map[erodeIndex] -= deltaSediment;
                sediment += deltaSediment;
            }
        }
        // Update droplet's speed and water content
        speed = sqrt (max(0,speed * speed + deltaHeight * gravity));
        water *= (1 - evaporateSpeed);
    }
 
}